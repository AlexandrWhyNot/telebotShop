import telebot
import const
from telebot import types
import sqlite3
import range
import time
import subprocess
import os
import re
import string
import threading
from threading import Thread
import requests


bot = telebot.TeleBot(const.token_bot)
city = dict()
tovar_d = dict()
ves_d = dict()
solo = list()
streat = list()
ban = list()
ph = ""

@bot.message_handler(commands=['start'])
def start_message(message):
        
        name = message.from_user.first_name
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–õ—å–≤–æ–≤", callback_data="–õ—å–≤–æ–≤")
        button2 = types.InlineKeyboardButton(text="–ö–∏–µ–≤", callback_data="–ö–∏–µ–≤")
        button3 = types.InlineKeyboardButton(text="–û–¥–µ—Å—Å–∞", callback_data="–û–¥–µ—Å—Å–∞")
        markup.add(button1, button2, button3)
        bot.send_message(message.chat.id, text = "–ü—Ä–∏–≤–µ—Ç, " + str(name) + ", –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –î–æ–±—Ä–æüÜÇüÖ∑üÖæÔ∏èüÖøÔ∏è. –ï—Å—Ç—å –≤—Å–µ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—É–º–∞—Ç—å —á–µ–≥–æ –∂–µ–ª–∞–µ—à—å! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–ª–∏–µ.", reply_markup=markup)
        
        

       
@bot.callback_query_handler(func=lambda c: (c.data == "–õ—å–≤–æ–≤" or c.data == "–ö–∏–µ–≤") or (c.data == "–û–¥–µ—Å—Å–∞" or c.data == "mainmanu"))
def inline(c):
        cid = c.message.chat.id
        mid = c.message.message_id
        if c.data == "–õ—å–≤–æ–≤":
                city[c.from_user.first_name] = "lvov"
        elif c.data == "–ö–∏–µ–≤":
                city[c.from_user.first_name] = "kyiv"
        elif c.data == "–û–¥–µ—Å—Å–∞":
                city[c.from_user.first_name] = "odessa"
        elif c.data == "mainmanu":
                keyboardmenu = types.InlineKeyboardMarkup(row_width=2)
                first_butt = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/Pravila-07-22-3")
                sec_butt = types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", url='t.me/alex_kotenko')
                th_butt = types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url='t.me/Underbhoomi')
                f_buttom = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π", callback_data="positions")
                keyboardmenu.add(first_butt, sec_butt, th_butt, f_buttom)
                bot.edit_message_text(chat_id=cid, message_id=mid, text="–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ü—Ä–∞–≤–∏–ª–∞!",reply_markup=keyboardmenu)
        markup2 = types.InlineKeyboardMarkup()
        url_link = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/Pravila-07-22-3")
        switch_b1 = types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", url='t.me/alex_kotenko')
        switch_b2 = types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url='t.me/Underbhoomi')
        po = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π", callback_data="positions")
        markup2.add(url_link, switch_b1, switch_b2, po)
        bot.edit_message_text(chat_id=cid, message_id=mid, text="–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ü—Ä–∞–≤–∏–ª–∞!",reply_markup=markup2)

@bot.callback_query_handler(func=lambda call: call.data == "positions" or call.data == "back2")
def positions(call):
        cid = call.message.chat.id
        mid = call.message.message_id

        if call.data == "back2":
                keyboardmenu2 = types.InlineKeyboardMarkup(row_width=2)
                b11 = types.InlineKeyboardButton(text="–§–µ–ª–æ—Ä–º–æ–Ω–∏—è", callback_data="–§–µ–ª–æ—Ä–º–æ–Ω–∏—è")
                b22 = types.InlineKeyboardButton(text="–®–µ–ª—Ö", callback_data="–®–µ–ª—Ö")
                b33 = types.InlineKeyboardButton(text="–ö–æ—Ä—Ç–æ—à–∫–∞", callback_data="–ö–æ—Ä—Ç–æ—à–∫–∞")
                back1 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mainmanu")
                keyboardmenu2.add(b11, b22, b33, back1)
                bot.edit_message_text(chat_id=cid, message_id=mid, text="–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º?", reply_markup=keyboardmenu2)
        
        markup3 = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="–§–µ–ª–æ—Ä–º–æ–Ω–∏—è", callback_data="–§–µ–ª–æ—Ä–º–æ–Ω–∏—è")
        b2 = types.InlineKeyboardButton(text="–®–µ–ª—Ö", callback_data="–®–µ–ª—Ö")
        b3 = types.InlineKeyboardButton(text="–ö–æ—Ä—Ç–æ—à–∫–∞", callback_data="–ö–æ—Ä—Ç–æ—à–∫–∞")
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mainmanu")
        markup3.add(b1, b2, b3, back)
        bot.edit_message_text(chat_id=cid, message_id=mid, text="–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º?", reply_markup=markup3)

@bot.callback_query_handler(func=lambda tovar: tovar.data == "–§–µ–ª–æ—Ä–º–æ–Ω–∏—è" or tovar.data == "–®–µ–ª—Ö"  or tovar.data == "–ö–æ—Ä—Ç–æ—à–∫–∞" or tovar.data == "back4")
def tovar_end(tovar):
        cid = tovar.message.chat.id
        mid = tovar.message.message_id
        markup = types.InlineKeyboardMarkup()
        if tovar.data == "–§–µ–ª–æ—Ä–º–æ–Ω–∏—è" or tovar.data == "1":
                tovar_d[tovar.from_user.first_name] = "–§–µ–ª–æ—Ä–º–æ–Ω–∏—è"
        elif tovar.data == "–®–µ–ª—Ö" or tovar.data =="3":
                tovar_d[tovar.from_user.first_name] = "–®–µ–ª—Ö"
        elif tovar.data == "–ö–æ—Ä—Ç–æ—à–∫–∞" or tovar.data == "3":
                tovar_d[tovar.from_user.first_name] = "–ö–æ—Ä—Ç–æ—à–∫–∞"
        elif tovar.data == "back4":
                keyboardmenu3 = types.InlineKeyboardMarkup()
                q1 = types.InlineKeyboardButton(text="1–≥", callback_data="1")
                q2 = types.InlineKeyboardButton(text="3–≥", callback_data="3")
                q3 = types.InlineKeyboardButton(text="5–≥", callback_data="5")
                back3 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back2")
                switch_v1 = types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url='t.me/Underbhoomi')
                keyboardmenu3.add(q1, q2, q3, switch_v1, back3)
                bot.edit_message_text(chat_id=cid, message_id=mid, text="–ö–∞–∫–æ–π –≤–µ—Å –Ω—É–∂–µ–Ω? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!", reply_markup=keyboardmenu3)

        
        v1 = types.InlineKeyboardButton(text="1–≥", callback_data="1")
        v2 = types.InlineKeyboardButton(text="3–≥", callback_data="3")
        v3 = types.InlineKeyboardButton(text="5–≥", callback_data="5")
        back3 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back2")
        switch_v = types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url='t.me/Underbhoomi')
        markup.add(v1, v2, v3, back3, switch_v)
        try:
                bot.edit_message_text(chat_id=cid, message_id=mid, text="–ö–∞–∫–æ–π –≤–µ—Å –Ω—É–∂–µ–Ω? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!", reply_markup=markup)
        except:
                v1 = types.InlineKeyboardButton(text="1–≥", callback_data="1")
                v2 = types.InlineKeyboardButton(text="3–≥", callback_data="3")
                v3 = types.InlineKeyboardButton(text="5–≥", callback_data="5")
                back3 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back2")
                switch_v = types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url='t.me/Underbhoomi')
                markup.add(v1, v2, v3, back3, switch_v)

@bot.callback_query_handler(func=lambda ves: (ves.data == "1" or ves.data == "3") or ves.data == "5")
def ves_end(ves):
        try:
                cid = ves.message.chat.id
                mid = ves.message.message_id        
                country = list()
                region = list()
                if ves.data == "1":
                        ves_d[ves.from_user.first_name] = "1"
                elif ves.data == "3":
                        ves_d[ves.from_user.first_name] = "3"
                elif ves.data == "5":
                        ves_d[ves.from_user.first_name] = "5"
                country.append(city[ves.from_user.first_name])
                t = tovar_d[ves.from_user.first_name]
        except KeyError:
                pass
        cid = ves.message.chat.id
        mid = ves.message.message_id 
       
     
        region.append(ves.data) 
        ve =  ves_d[ves.from_user.first_name]
        con = sqlite3.connect("DataBase.db")
        cur = con.cursor()
        cur.execute("SELECT DISTINCT streat FROM stock WHERE city = (?) AND name_stock = (?) AND much = (?)",[country[0], t, int(ve)])
        datadb = list(cur)
        markup = types.InlineKeyboardMarkup()  
        for row in datadb:
                a = types.InlineKeyboardButton(text=row[const.const], callback_data=row[const.const]) 
                streat.append(row[const.const])
                markup.add(a) 
        back4 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back4")
        markup.add(back4)
        con.commit() 
        cur.close()
        con.close()   
        bot.edit_message_text(chat_id=cid, message_id=mid, text="–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É.", reply_markup=markup)


@bot.callback_query_handler(func=lambda all_req: all_req.data in streat)
def funct(all_req):
        cid = all_req.message.chat.id
        mid = all_req.message.message_id
        countrys = city[all_req.from_user.first_name] 
        ts = tovar_d[all_req.from_user.first_name]
        ves =  ves_d[all_req.from_user.first_name]
        st = all_req.data
        con1 = sqlite3.connect("DataBase.db")
        cur = con1.cursor()
        cur.execute("SELECT DISTINCT price FROM stock WHERE city = (?) AND name_stock = (?) AND much = (?) AND streat = (?)",[countrys, ts, int(ves), st])
        datadb = list(cur)
        for row in datadb:
                solo.append(row[const.const])
                pr = row[const.const]
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="mainmanu")
        buy = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="price")
        markup.add(back, buy)
        con1.commit()
        cur.close()
        con1.close()
        bot.edit_message_text(chat_id=cid, message_id=mid, text="–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –º—ã –∏–º–µ–µ–º? –¢—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ - {} –Ω–∞ —Ä–∞–π–æ–Ω–µ {} –∏ –ø–æ –≤–µ—Å—É  {} –±—É–¥–µ—Ç {}–≥—Ä–∞–º–º . –¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å {}–≥—Ä–Ω. –ì–æ—Ç–æ–≤ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—Å—è?".format(countrys, st, ts, ves, pr), reply_markup=markup)


@bot.callback_query_handler(func=lambda yets: yets.data == "price")
def somfunk(yets):
        cid = yets.message.chat.id
        mid = yets.message.message_id
        markup = types.InlineKeyboardMarkup() 
        bby = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="check")
        oo = types.InlineKeyboardButton(text="EasyPay - 95436138", url="https://easypay.ua/ua/catalog/e-money/easypay/easypay-money-deposit?account=95436138")
        markup.add(oo)
        markup.add(bby)
        bot.edit_message_text(chat_id=cid, message_id=mid,text="–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–µ –∑–∞–±—É–¥—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!'–ù–∞ –≤—Å–µ —É —Ç–µ–±—è –µ—Å—Ç—å 35 –º–∏–Ω—É—Ç. –µ—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å –∏–ª–∏ –≤–≤–µ–¥–µ—à—å –Ω–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –ø–æ–ª—É—á–∏—à—å –±–∞–Ω. 3 –±–∞–Ω–∞ - –ß–°.", reply_markup=markup)



server_data = "22.04.2019 13:18"
server_sum = "100"
serv_d = server_data + server_sum
@bot.callback_query_handler(func=lambda okbuy: okbuy.data == "check")
def ff(okbuy):
        cid = okbuy.message.chat.id
        mid = okbuy.message.message_id
        bot.edit_message_text(chat_id=cid, message_id=mid, text="–í–≤–µ–¥–∏ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –æ—Ç–ø–ª–∞—Ç—ã. –ü—Ä–æ–±–µ–ª —á–∞—Å—ã –º–∏–Ω—É—Ç—ã! –ü–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–ª–∞—Ç–∏–ª. –ü—Ä–∏–º–µ—Ä XX.XX.XX XX:XX xxx")       


@bot.message_handler(content_types=['text'])
def price_streat(price):
        cid = price.chat.id
        mid = price.message_id
        countrys = city[price.from_user.first_name] 
        ts = tovar_d[price.from_user.first_name]
        ves =  ves_d[price.from_user.first_name]
        st = streat[-1]
        so = solo[-1]
        con1 = sqlite3.connect("DataBase.db")
        cur = con1.cursor()
        cur.execute("SELECT DISTINCT * FROM stock WHERE city = (?) AND name_stock = (?) AND much = (?) AND streat = (?) AND price = (?)",[countrys, ts, int(ves), st, so])
        datadb = list(cur)
        counterc = 0
        cr = list()
        for row in datadb:
                solo.append(row[counterc])
                cr.append(row[counterc])
                counterc = counterc + 1
        cur.execute("SELECT DISTINCT photo FROM stock WHERE city = (?) AND name_stock = (?) AND much = (?) AND streat = (?) AND price = (?)",[countrys, ts, int(ves), st, so])
        datadb = list(cur)
        for row in datadb:
                ph = row[const.const]
        print(ph)
        con1.commit()
        cur.close()
        con1.close()
        msg = ""
        if(serv_d == price.text):
                print(serv_d)
                print(type(serv_d))
                bot.edit_message_text(chat_id=cid, message_id=mid, text="–•–æ—Ä–æ—à–æ, —Å–∫–∏–¥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è!")
                time.sleep(3)
                msg = bot.edit_message_text(chat_id=cid, message_id=mid, text="–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–µ –∑–∞–±—É–¥—Ç–µ –µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!" + ph)
                conn = sqlite3.connect("DataBase.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM stock WHERE photo = (?)",[ph])
                conn.commit()
                cursor.close()
                conn.close()
                ok = "end"
                baaaan(ok)
        else:
                bot.register_next_step_handler(msg, "–£ —Ç–µ–±—è —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", moreOne)

def moreOne(message):
        chat_id = message.chat.id
        
        if(serv_d == message.text):
                print(serv_d)
                print(type(serv_d))
                bot.send_message(chat_id, text="–•–æ—Ä–æ—à–æ, —Å–∫–∏–¥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è!")
                time.sleep(3)
                bot.send_message(chat_id, text="–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–µ –∑–∞–±—É–¥—Ç–µ –µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!" + ph)
                conn = sqlite3.connect("DataBase.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM stock WHERE photo = (?)",[ph])
                conn.commit()
                cursor.close()
                conn.close()
                ok = "end"
                baaaan(ok)
        else:
                if ban[message.from_user.first_name] == 0:
                        bot.send_message(chat_id, text="–£ —Ç–µ–±—è 1 –∑–∞–º–µ—á–∞–Ω–∏–µ. 3 –∑–∞–º–µ—á–∞–Ω–∏—è - –ë–ê–ù")
                        ban[message.from_user.first_name] = 1
                elif ban[message.from_user.first_name] == 1:
                        bot.send_message(chat_id, text="–£ —Ç–µ–±—è 2 –∑–∞–º–µ—á–∞–Ω–∏–µ. 3 –∑–∞–º–µ—á–∞–Ω–∏—è - –ë–ê–ù")
                        ban[message.from_user.first_name] = 2
                elif ban[message.from_user.first_name] == 2:
                        bot.send_message(chat_id, text="–£ —Ç–µ–±—è 3 –∑–∞–º–µ—á–∞–Ω–∏–µ. 3 –∑–∞–º–µ—á–∞–Ω–∏—è - –ë–ê–ù")
                        ban[message.from_user.first_name] = 3
                        notok = "sad"
                        baaaan(notok)
                elif ban[message.from_user.first_name] == 3:
                        bot.send_message(chat_id, text="–£ —Ç–µ–±—è 3 –∑–∞–º–µ—á–∞–Ω–∏–µ. 3 –∑–∞–º–µ—á–∞–Ω–∏—è - –ë–ê–ù")
                        notok = "sad"
                        baaaan(notok)

                
def baaaan(m):
        chat_id = m.chat.id
        if m == "end":
                pass
        if m == "sad":
                bot.edit_message_text(chat_id, "–¢—ã –ø–æ–ª—É—á–∏–ª 3 –±–∞–Ω–∞. –î–∞–≤–∞–π –î–û —Å–≤–∏–¥–∞–Ω–∏—è!")



        
        # city.clear()
        # tovar_d.clear()
        # ves_d.clear()
        # solo.clear()
        #del streat[:]



  
if __name__ == "__main__":
        bot.polling(none_stop=True, interval=0)
                
        
